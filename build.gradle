description = 'Spring XD'

apply plugin: 'base'
apply plugin: 'idea'

buildscript {
	repositories {
		maven { url "http://repo.springsource.org/plugins-snapshot" }
	}
	dependencies {
		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.3")
		classpath("org.springframework.build.gradle:docbook-reference-plugin:0.2.7-SNAPSHOT")
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.4.1'
		classpath 'org.ajoberstar:gradle-git:0.4.0'
		classpath 'me.champeau.gradle:gradle-javadoc-hotfix-plugin:0.1'
	}
}

ext {
	linkHomepage = 'https://github.com/SpringSource/spring-xd'
	linkCi       = 'https://build.springsource.org/browse/XD'
	linkIssue    = 'https://jira.springsource.org/browse/XD'
	linkScmUrl           = 'https://github.com/SpringSource/spring-xd'
	linkScmConnection    = 'https://github.com/SpringSource/spring-xd.git'
	linkScmDevConnection = 'git@github.com:SpringSource/spring-xd.git'

	javadocLinks = [
		"http://static.springsource.org/spring-shell/docs/current/api/"
	] as String[]

}

allprojects {
	group = 'org.springframework.xd'

	repositories {
		maven { url 'http://repo.springsource.org/libs-milestone' }
		maven { url 'http://repo.springsource.org/plugins-release' }
        maven { url 'http://repo1.maven.org/maven2' }
	}
	apply plugin: 'javadocHotfix'
}

def javaProjects() {
	subprojects.findAll { project -> project.name != 'redis' }
}

configure(javaProjects()) { subproject ->

	apply plugin: 'java'
	apply from:   "${rootProject.projectDir}/publish-maven.gradle"
	apply plugin: 'eclipse'
	apply plugin: 'idea'

	sourceCompatibility=1.6
	targetCompatibility=1.6

	ext {
		jacksonVersion = '1.9.12'
		junitVersion = '4.11'
		hamcrestVersion = '1.3'
		jodaTimeVersion = '1.6'
		springVersion = '3.2.2.RELEASE'
		springBatchVersion = '2.1.9.RELEASE'
		springIntegrationVersion = '3.0.0.M2'
		springDataMongoVersion = '1.1.1.RELEASE'
		springDataRedisVersion = '1.0.4.RELEASE'
		springDataGemfireVersion = '1.3.1.RELEASE'
		lettuceVersion = '2.3.2'
		springDataHadoopVersion = '1.0.0.RELEASE'
		springHATEOASVersion = '0.6.0.RELEASE'
		tomcatVersion = '7.0.35'
		commonsBeanUtilsVersion = '1.6'
		slf4jVersion = '1.7.5'
		log4jVersion = '1.2.17'
		args4jVersion = '2.0.16'
		mockitoVersion = '1.9.5'
	}

	eclipse {
		project {
			natures += 'org.springframework.ide.eclipse.core.springnature'
		}
	}

	sourceSets {
        main {
            java {
                srcDirs "src/main/gen-java"
            }
        }
		test {
			resources {
				srcDirs = ['src/test/resources', 'src/test/java']
			}
		}
	}

	configurations {
		jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
	}

	// dependencies that are common across all java projects
	dependencies {
		testCompile "junit:junit:$junitVersion"
		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
		jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.6.2.201302030002", classifier: "runtime"
	}

	// enable all compiler warnings; individual projects may customize further
	[compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:all"]

	test {
		// suppress all console output during testing unless running `gradle -i`
		logging.captureStandardOutput(LogLevel.INFO)
		jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=org.springframework.xd.*"
	}

	javadoc {
		description = "Generates project-level javadoc for use in -javadoc jar"

		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = project.name
		options.links(javadocLinks)

		// suppress warnings due to cross-module @see and @link references;
		// note that global 'api' task does display all warnings.
		logging.captureStandardError LogLevel.INFO
		logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allJava
	}

	jar {
		manifest.attributes["Created-By"] =
			"${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
		manifest.attributes["Implementation-Title"] = subproject.name
		manifest.attributes["Implementation-Version"] = subproject.version
		exclude('log4j.properties')
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
}

project('spring-xd-analytics') {
	description = 'Spring XD Anayltics'
	dependencies {
		compile project(":spring-xd-tuple")
		compile "org.springframework:spring-core:$springVersion"
		compile "org.springframework.data:spring-data-redis:$springDataRedisVersion"
		compile "com.lambdaworks:lettuce:$lettuceVersion"
		compile "org.springframework.data:spring-data-mongodb:$springDataMongoVersion"
		compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
		compile "joda-time:joda-time:$jodaTimeVersion"
		testCompile "nl.jqno.equalsverifier:equalsverifier:1.1.3"
		testCompile "org.springframework:spring-test:$springVersion"
		testCompile ("org.mockito:mockito-core:$mockitoVersion") {
			exclude group:'org.hamcrest'
		}
		testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"
		runtime "log4j:log4j:$log4jVersion",
				"org.slf4j:jcl-over-slf4j:$slf4jVersion",
				"org.slf4j:slf4j-log4j12:$slf4jVersion"
	}
}

project('spring-xd-dirt') {
	description = 'Spring XD DIRT'

	dependencies {
		compile project(":spring-xd-analytics"),
				project(":spring-xd-module"),
				project(":spring-xd-http"),
                "org.apache.hadoop:hadoop-common:2.0.2-alpha",
                "org.apache.hadoop:hadoop-hdfs:2.0.2-alpha",
                "org.apache.hadoop:hadoop-yarn-client:2.0.2-alpha",
				"org.springframework:spring-webmvc:$springVersion",
				"org.springframework.hateoas:spring-hateoas:$springHATEOASVersion",
				"org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion",
				"org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion",
				"org.apache.tomcat.embed:tomcat-embed-logging-juli:$tomcatVersion",
				"org.apache.tomcat:tomcat-jsp-api:$tomcatVersion",
				"com.beust:jcommander:1.25",
				"log4j:log4j:$log4jVersion",
				"org.apache.thrift:libthrift:0.8.0",
				"org.springframework.integration:spring-integration-amqp:$springIntegrationVersion",
				"org.springframework.integration:spring-integration-event:$springIntegrationVersion",
				"org.springframework.integration:spring-integration-file:$springIntegrationVersion",
				"org.springframework.integration:spring-integration-gemfire:$springIntegrationVersion",
				"org.springframework.integration:spring-integration-groovy:$springIntegrationVersion",
				"org.springframework.integration:spring-integration-redis:$springIntegrationVersion",
				"org.springframework.data:spring-data-redis:$springDataRedisVersion",
				"com.lambdaworks:lettuce:$lettuceVersion",
				"org.springframework.integration:spring-integration-syslog:$springIntegrationVersion",
				"org.springframework.social:spring-social-twitter:1.0.5.RELEASE",
				"args4j:args4j:$args4jVersion",
				"org.springframework.shell:spring-shell:1.0.0.RELEASE",
				"com.eaio.uuid:uuid:3.2"
		runtime "org.slf4j:jcl-over-slf4j:$slf4jVersion",
				"org.slf4j:slf4j-log4j12:$slf4jVersion"
		testCompile project(":spring-xd-test")
		testCompile ("org.mockito:mockito-core:$mockitoVersion") {
			exclude group:'org.hamcrest'
		}

	}

	apply plugin:'application'
	// skip the startScripts task to avoid default start script generation
	startScripts.setEnabled(false)
	mainClassName = "org.springframework.xd.dirt.server.AdminMain"

	run {
		args = ['--transport', 'local']
	}

    task generateThrift << {
      FileTree thriftFiles = fileTree(dir: 'src/main/thrift').matching { include '**/*.thrift' }
      exec {
        executable = 'thrift'
        args = ['--gen', 'java:hashcode', '-o', 'src/main/', thriftFiles.collect { it.absolutePath }.join(",") ]
      }
    }

    task cleanThrift << {
        delete 'src/main/gen-java'
    }
   
	task configFiles {
		def config = file("$rootDir/config")
		outputs.dir config
	}

	task moduleFiles {
		def modules = file("$rootDir/modules")
		outputs.dir modules
	}

	task scriptFiles {
		def scripts = file("$rootDir/scripts/xd")
		outputs.dir scripts
	}

	applicationDistribution.from(configFiles) {
		into "config"
	}

	applicationDistribution.from(scriptFiles) {
		into "bin"
	}

	applicationDistribution.from(moduleFiles) {
		into "modules"
	}

    compileJava.dependsOn generateThrift
    clean.dependsOn cleanThrift
}

project('spring-xd-http') {
	description = 'Spring XD HTTP'
	dependencies {
		compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
		compile "io.netty:netty:3.6.5.Final"
		testCompile project(":spring-xd-test")
		testCompile "org.springframework:spring-web:$springVersion"
	}
}

project ('spring-xd-gemfire-server') {
	description = 'Gemfire Server to support XD Development and Demos'
	dependencies {
		compile "commons-beanutils:commons-beanutils:$commonsBeanUtilsVersion"
		compile "org.springframework.data:spring-data-gemfire:$springDataGemfireVersion"
		runtime "log4j:log4j:$log4jVersion",
				"org.slf4j:jcl-over-slf4j:$slf4jVersion",
				"org.slf4j:slf4j-log4j12:$slf4jVersion"
	}
	apply plugin:'application'
	// skip the startScripts task to avoid default start script generation
	startScripts.setEnabled(false)

	task(launch, dependsOn: 'classes', type: JavaExec) {
		main = 'org.springframework.xd.gemfire.CacheServer'
		classpath = sourceSets.test.runtimeClasspath
		if (rootProject.hasProperty('config')) {
			args = ["${rootProject.getProperty('config')}"]
		}
	}

	mainClassName = 'org.springframework.xd.gemfire.CacheServer'

	task configFiles {
		def configs = file("$rootDir/spring-xd-gemfire-server/config")
		outputs.dir configs
	}

	applicationDistribution.from(configFiles) {
		into "bin"
	}

	task scriptFiles {
		def scripts = file("$rootDir/scripts/gemfire")
		outputs.dir scripts
	}

	applicationDistribution.from(scriptFiles) {
		into "bin"
	}
}


project('redis') {
	description = 'Redis distribution'
	task syncScriptFiles(type: Sync) {
		from "$rootDir/scripts/redis"
		into project.file("${project.buildDir}/bin")
	}

	task sourceDist {
		def distFile = file("$rootDir/redis/dist")
		outputs.dir distFile
	}

	task syncDistFile(type: Sync) {
		from "$rootDir/redis/dist"
		into project.file("${project.buildDir}/dist")
	}

	task bundleRedis(dependsOn: ['syncScriptFiles', 'syncDistFile']) {
		description = "Bundle redis source dist with install script"
	}

	task clean(type: Delete) {
		description = "Wipes Redis build directory"
		delete 'build'
	}
}

project('spring-xd-module') {
	description = 'Spring XD Module'
	dependencies {
		compile "org.springframework:spring-context:$springVersion"
	}
}

project('spring-integration-module') {
	description = 'Spring Integration Module Support'
	dependencies {
		compile project(":spring-xd-module")
		compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
	}
}

project('spring-xd-tuple') {
	description = 'Spring XD Tuple'
	dependencies {
		compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
		compile "org.springframework.batch:spring-batch-infrastructure:$springBatchVersion"
		compile "org.springframework:spring-jdbc:$springVersion"
		testCompile ("org.mockito:mockito-core:$mockitoVersion") {
			exclude group:'org.hamcrest'
		}
	}
}

project('spring-xd-hadoop') {
	description = 'Spring XD Hadoop'
	dependencies {
		compile "org.springframework:spring-aop:$springVersion"
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework:spring-context-support:$springVersion"
		compile "org.springframework:spring-jdbc:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
		compile "org.springframework.batch:spring-batch-core:$springBatchVersion"
		compile "org.springframework.data:spring-data-mongodb:$springDataMongoVersion"
		compile ("org.springframework.data:spring-data-hadoop:$springDataHadoopVersion") {
			exclude group: 'org.mortbay.jetty'
		}
	}
}

project('spring-xd-test') {
	description = 'Spring XD Test'
	dependencies {
		compile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
		compile "org.springframework.integration:spring-integration-redis:$springIntegrationVersion"
		compile "org.springframework.data:spring-data-redis:$springDataRedisVersion"
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework:spring-context-support:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile "org.springframework:spring-test:$springVersion"
		compile "com.lambdaworks:lettuce:$lettuceVersion"
		compile "junit:junit:$junitVersion"
	}
}

apply plugin: 'sonar-runner'

sonarRunner {
	sonarProperties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

task launch {
	dependsOn 'spring-xd-dirt:run'
}

task copyRedisInstall(type: Copy, dependsOn: ":redis:bundleRedis") {
	from "$rootDir/redis/build"
	into "$buildDir/dist/spring-xd/redis"
}

task copyGemfireInstall(type: Copy, dependsOn: ":spring-xd-gemfire-server:installApp") {
	from "$rootDir/spring-xd-gemfire-server/build/install/spring-xd-gemfire-server"
	into "$buildDir/dist/spring-xd/gemfire"
}

task copyXDInstall(type: Copy, dependsOn: [":spring-xd-dirt:build", ":spring-xd-dirt:installApp"]) {
	from "$rootDir/spring-xd-dirt/build/install/spring-xd-dirt"
	into "$buildDir/dist/spring-xd/xd"
}

task cleanDist(type: Delete) {
	description = "cleans $rootDir/dist directory"
	delete "$buildDir/dist"
}

task distXD (type: Copy, dependsOn: ["cleanDist", "copyRedisInstall", "copyGemfireInstall", "copyXDInstall"]) {
	description = "Copy all the required installs"
	from "$rootDir/scripts/README"
	from "$rootDir/scripts/LICENSE"
	into "$buildDir/dist/spring-xd"
}

configurations {
	dist
}

task zipXD (type: Zip, dependsOn: "distXD"){
	description = "Bundles Spring XD into dist/"
	from file("$buildDir/dist/spring-xd").absolutePath
	into "spring-xd"
	destinationDir file("$buildDir/dist")
}

artifacts {
	dist zipXD
}

import org.ajoberstar.gradle.git.tasks.*
import org.apache.tools.ant.filters.TokenFilter

task pullDocs(type: GitClone) {
	if (project.gradle.startParameter.offline) {
		enabled = false
	}

	def destination = file("$buildDir/asciidoc-raw")

	uri = "git://github.com/SpringSource/spring-xd.wiki.git"
	destinationPath = destination
	bare = false

	doFirst {
		if (destination.exists()) {
			destination.deleteDir()
			file("$buildDir/asciidoc").deleteDir()
		}
	}

	doLast {
		copy {
			from("$buildDir/asciidoc-raw") {
				include  "**/*.asciidoc"
				filter { line ->
						// TODO: refine regex to only match local documents
						def match = (line =~ /link:(.*?)#(.*?)\[(.*?)\]/)
						if (match) match.replaceAll('xref:$2[$3]') else line
				}
			}
			from("$buildDir/asciidoc-raw") {
				exclude "**/*.asciidoc"
			}
			into("$buildDir/asciidoc")

		}

		new File("$buildDir/asciidoc/guide/FullGuide.adoc")
			.renameTo(new File("$buildDir/asciidoc/guide/index.adoc"))
		new File("$buildDir/asciidoc/guide/FullGuide-docinfo.xml")
			.renameTo(new File("$buildDir/asciidoc/guide/index-docinfo.xml"))

	}
}

import org.asciidoctor.gradle.*

task asciidoctorDocbook(type: AsciidoctorTask, dependsOn: [pullDocs]) {
	sourceDocumentName = file("$buildDir/asciidoc/guide/index.adoc")
	sourceDir = file("$buildDir/asciidoc/guide")
	outputDir = file("$buildDir/docbook")
	backend = "docbook"
	options = [
		attributes: [
			docinfo: ''
		]
	]

	doLast {
		copy {
			from "$buildDir/asciidoc/images"
			into "$buildDir/docbook/images"
		}
	}
}

task asciidoctorHtml(type: AsciidoctorTask, dependsOn: [pullDocs]) {
	sourceDocumentName = file("$buildDir/asciidoc/guide/index.adoc")
	sourceDir = file("$buildDir/asciidoc/guide")
	outputDir = file("$buildDir/html")
	backend = "html5"
	options = [
		attributes: [
			docinfo: '',
			toc2: '',
			imagesdir: 'images',
			stylesdir: 'stylesheets',
			stylesheet: 'golo.css',
			appversion: "$version",
			'source-highlighter': 'highlightjs'
		]
	]

	doLast {
		copy {
			from "$buildDir/asciidoc/guide/images"
			into "$buildDir/html/images"
		}
		copy {
			from "$buildDir/asciidoc/images"
			into "$buildDir/html/images/images"
		}
		copy {
			from "$buildDir/asciidoc/guide/stylesheets"
			into "$buildDir/html/stylesheets"
		}
	}
}

apply plugin: 'docbook-reference'

ext {
	expandPlaceholders = ""; //For Gradle Reference Plugin
}

reference {
	sourceFileName = 'index.xml'
	sourceDir = file("$buildDir/docbook")
	pdfFilename = 'spring-xd-reference.pdf'
}

reference.dependsOn asciidoctorDocbook

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates aggregated Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.links(javadocLinks)
	options.overview = 'src/api/overview.html'

	source rootProject.javaProjects().collect { project ->
		project.sourceSets.main.allJava
	}
	destinationDir = new File(buildDir, "api")
	classpath = files(rootProject.javaProjects().collect { project ->
		project.sourceSets.main.compileClasspath
	})
}

task docsZip(type: Zip) {
	group = 'Distribution'
	classifier = 'docs'
	description = "Builds -${classifier} archive containing api and reference " +
		"for deployment at static.springframework.org/spring-integration/docs."

	from (api) {
		into 'api'
	}

	from (reference) {
		exclude 'htmlsingle'
		exclude 'html'
		into 'reference'
	}

	from ("$buildDir/html") {
		into "reference/html"
	}
}

task distZip(type: Zip, dependsOn: [asciidoctorHtml, distXD]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('dist/spring-xd') {
		into "${baseDir}"
	}

	from ("$buildDir/html") {
		into "${baseDir}/docs"
	}

}

artifacts {
	archives distZip
	archives docsZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
	description = "Generates gradlew[.bat] scripts"
	gradleVersion = "1.6"
}
